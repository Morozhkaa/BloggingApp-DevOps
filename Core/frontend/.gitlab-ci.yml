image: docker.io/persikida/helm:latest

variables:
  KUBECONFIG: /root/.kube/config

stages:
  - build
  - deploy_manifests

build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always
  image: docker:24.0.0-beta.1-cli
  services:
    - docker:24.0.0-beta.1-dind
  before_script:
    # Install git
    - apk update && apk add git
    - git --version
    # Increase the version and add it to build.env
    - PREV_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
    - VERSION=$(echo $PREV_VERSION | awk -F. -v OFS=. '{$NF += 1 ; print}')
    - echo "VERSION=$VERSION" > build.env
    - echo $VERSION
    # Run docker login command
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    # Upload image to Container Registry
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    # Add a tag to the latest commit (to keep the version)
    - git remote rename origin prev_origin
    - git remote add origin https://Morozhkaa:glpat-5a8EZCpoXRKssM1h1cwk@gitlab.com/teta-students/hse_shishkina/core/frontend.git
    - git config --global user.email "olenka.shishkina.02@mail.ru"
    - git config --global user.name "Morozhkaa"
    - git tag -a $VERSION -m "increased version"
    - git push --tags
  artifacts:
    reports:
      dotenv: build.env

deploy_manifests:
  stage: deploy_manifests
  needs:
  - job: build
    artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never 
    - when: always
  variables:
    kube_config: YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCmN1cnJlbnQtY29udGV4dDogZmFpdGhmdWwtZ29zaGF3ay04Mzg3YTkKY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGZhaXRoZnVsLWdvc2hhd2stODM4N2E5CiAgICB1c2VyOiBhZG1pbgogIG5hbWU6IGZhaXRoZnVsLWdvc2hhd2stODM4N2E5CmNsdXN0ZXJzOgotIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHktZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUlNla05EUVdrclowRjNTVUpCWjBsVlVERmlRblZyTlZZM1QzbFRlVmxLU3pOM05uazFVM1IwV0dsWmQwUlJXVXBMYjFwSmFIWmpUa0ZSUlV3S1FsRkJkMFpxUlZWTlFrbEhRVEZWUlVGNFRVeGpSM1J3VEZkT2FFeFlTblppTTFGM1NHaGpUazFxVFhkTmVrRXdUVlJaTUUxNlRUVlhhR05PVGtSVmVBcE5ha2t6VFVSQk1FNUVRVFZYYWtKQlRWUTBkMUJCV1VSV1VWRkVSWHBWTTAxWFdUQk9SMDV0VDBNd00xcFVUbTFNVkZGNldWZFZkRmxVV1RSYVF6Rm9DazV0VG1wT2VtdDNXV3BOZWs1VWEyZGlWMFp3WW1sQ2FscFlTakJoVjFwd1dUSkdNRnBVUTBOQlUwbDNSRkZaU2t0dldrbG9kbU5PUVZGRlFrSlJRVVFLWjJkRlVFRkVRME5CVVc5RFoyZEZRa0ZPYjJ4UFZ6RmFSM0ZsUWpGeFJUVkxiVWhqYjNWdk5tcGlVVVZUVFdwaWJVTjFTbEp6VlRkTWNIZ3ZlVGhPTUFwVGJuQnhhVFUxV0hRelpHWnRORlZhWjBSNFFsZDZhVWRGUTBwbVN6SXZZblUyZFZrNVFXSXpVVmROVkZKdmVUZFJTVWQzT0RVelF5dFBTalZ2U1VGQ0NrVlNjMGhtTTJob01FTkVWamh0ZGpOQldVRjZXRmxYUTNkM2FYRnFaVFZTUVhSdFkyTnRkMFZzYmpoYVUySjNkVU5ZWkZodVVHOU5hbFJZTTNacEswY0tWbGhXUlUxUE5XZERSM0JrUWxoM2FIYzBaRUZXZGxZMGFGTlBja00wWWtkTlZETnhlSFptVEVKSllsSmxLemd4VGxWRlJscElLM2hRY1ZkTVNDdGhVQXBsVDFNd2MxZERjWFUwYzNZNE4zVnFTSEpqZUV0d2IyaFhOR1pJUVhodFRUWnJVMk5WUmt4M2FYaG5VRzAyVDNaeGRuZFJkRUl2WkRCUlJVOUVPVVpCQ2lzMmFucHJOalZ2ZW5GeVRIUkxlVWxKWlZOM1RWUmxjelZQZDBsemFWRnRWbHBIZDI5Tk1FTkJkMFZCUVdGT2FrMUhSWGRFWjFsRVZsSXdVRUZSU0M4S1FrRlJSRUZuUlVkTlFUaEhRVEZWWkVWM1JVSXZkMUZHVFVGTlFrRm1PSGRJVVZsRVZsSXdUMEpDV1VWR1RtVTJZamxKUjNnNFpFWTNNa2szZUhGQllncHlkM3BLUTJGQ2JFMUNPRWRCTVZWa1NYZFJXVTFDWVVGR1RHNXBkRGxEY1dRdlJHRk9PVUl4VUUxaGRTdEhkRTlyTTFCQlRVRXdSME5UY1VkVFNXSXpDa1JSUlVKRGQxVkJRVFJKUWtGUlFWTm1XbWQ2Y2l0UlVFaFRielYzYkd3eU1rMVVRemMxZUdoa2JrWmljMlphTWpGRlVraDFVblF2YzFkVGJGUnhRVlFLYWxGaGNHSk5aWEE1YkcxcmJrdEpkREpIY1RGamJrNUhTREZpWjJjeE1VSlRjMXBUV21wRGEzZDFaazE2YzJOaE56RlRjRlpYU1RKR1dscGtVM3BaY1FvM2FuZFRkRTAyTW1nMlNUVmpOVFZhWkhSMVJqTkhkaXRwZFZkSVl6RjRlRE5vT1VKSGJVMUlVamhTZURONk5FMW1hMUp5TDJsT2IxWTVVVXAwYjFGTENscGFTbXhTY0hSRlZ6ZHFWVzh2VGtSMk9FMTZUVFEyYTBsdFlrWktWVVIxVGtGMmVGQXZTblIzZEd0SFZWZHdZVU5vVUUxQ1RtdHpRVVJPZG5NMmMyUUtXVFpFYmxwWmVDc3lXWFFyUTNsRVMxZGhSbkoyYUc0d1NWZ3ZlVTAxZHpOcE9FaEdRV28xWkU5WU9WazFUekJIZG5BM1RUUXdSVzgwVlVwS2FXRmxVQXB2VVVsellUWTBZM28zVm1GVGQwVmhWVVJXTURKNGIwdHdUazl5YmxkdmNHRlJjMmNLTFMwdExTMUZUa1FnUTBWU1ZFbEdTVU5CVkVVdExTMHRMUT09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vOTEuMTg1Ljg2LjQ3OjY0NDMKICBuYW1lOiBmYWl0aGZ1bC1nb3NoYXdrLTgzODdhOQp1c2VyczoKLSB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlLWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJZUkVORFFXdFRaMEYzU1VKQlowbFZaWGhRVWpSTVdXSTVUQ3R6VUd0eE9GbHdhbE5JU1V4d0wwWTRkMFJSV1VwTGIxcEphSFpqVGtGUlJVd0tRbEZCZDFGRVJTdE5SSGRIUVRGVlJVRjRUVEZPZWtadFRrUlNhbHBxWjNST01sVjZXbWt3TUUweVJteE1WMFV5VDBkUmRGbFVXbXBaZW1NMVRVZEplZ3BOZWxVMVNVY3hhR0ZYTkdkWk1sWjVaRWRzYldGWFRtaGtSMVYzU1VKalRrMXFUWGROZWtFd1RWUlpNRTE2VFRWWGFHZFFUV3BGZDA1VVFUQk5hazE0Q2s1cVVUQk5SR3hoVFVOcmVFWjZRVlpDWjA1V1FrRnZWRVJ1VGpWak0xSnNZbFJ3ZEZsWVRqQmFXRXA2VFZFMGQwUkJXVVJXVVZGRVJYZFdhRnBITVhBS1ltcERRMEZUU1hkRVVWbEtTMjlhU1doMlkwNUJVVVZDUWxGQlJHZG5SVkJCUkVORFFWRnZRMmRuUlVKQlMzSndLMVphWlhCM1kzSlBMMHcxVnk4eFV3b3haekpKYkhKRFRXdHpORE5DV2t0VGIzbHRTMWwxTTNCdFRUZGFNblpUV1Rkb2FuZHhVM28yUlVoSGRtMXBWMnRXWWtOUVlreENZVzE0WjBKU2J6STRDbmxJWkdoUFNWcG1ZazVzT1hGeWVqUlBUV3RMT0ZCSVZ6UlJTa3BCYTJ0dlptNHliREJYZUdKSE15dE1ZVmcxU204dlNXeFVjVzR6UVdWTVRVNWxjWEVLTjJsNU1tSnNSMDFDYlVwbU9FdENjWGhhVnk5aFVFcHhZelp6TkhCbFNGTlJiRGQyU1hOaWRFcFJiWG93U1VOcVZFZHVVV0YwVkV4eFFqZFVZbWRJVXdwSU5rTnJSalpTZERKR1YyZzVNV3N6UTFCd1pUVlFWbWhqYnpsSVQzSlFTVEpQVDFKbFVUZG9aMGRQVEdoNGEwdFRTQzlUV1dkeWVEWXpUV0owVG5wMENtRnBkR0puU2s1MUsybFFSSEU1TlhkV1JrSnNhemxEWTA1eVUyVk1jWGx0YW05bGJFaEpXRmxLU25od1RIbzRZbE0wUlVFdlNrUXhabXBsV1RaaldrNEtLMFJqUTBGM1JVRkJZVTVxVFVkRmQwUm5XVVJXVWpCUVFWRklMMEpCVVVSQlowVkhUVUU0UjBFeFZXUkZkMFZDTDNkUlJrMUJUVUpCWmpoM1NGRlpSQXBXVWpCUFFrSlpSVVpPVVdwUGNXczBlamROVlUxelJERm5UR0owWXl0RE5TdDFLMkpOUWpoSFFURlZaRWwzVVZsTlFtRkJSazVsTm1JNVNVZDRPR1JHQ2pjeVNUZDRjVUZpY25kNlNrTmhRbXhOUVRCSFExTnhSMU5KWWpORVVVVkNRM2RWUVVFMFNVSkJVVUlyVjJKd1QyVkRRa1oyZG1ST1VIUm1kMWh1ZUhZS1JqZ3dXV2szZUc1SVIwbHVSRlpVYVhoS2NrcFVXV3BGVkVST1VWTlZkR1YyWmtOR2NtSnRXbVJ6UTJwa1NqVnVVazkxYzA5bmMzUk9SVkpYU0RaRGJRcEllbEoxTTIxb05IbDBhSEpKTm5OWVIzZHpRMFp0UldkRk0wbE1kbEVyVFV0cVJTdFdRbm9yTm1nMlpWZElUV3BDVlhaamRqSlBPVXRrVW1KYWFtMTZDa2N3UnpWTGFXZ3phbTVSVFVoeVVFMVBOMVpCZFhKSVZYRnNPWGRSUkdsS1duVnBTR2Q0TVVrdmF6SjBkelZZZDBOV2FFRkdTSFZMT0RGd2EwbEtTWEFLVmpad1VFaEZWelp1YzBkT2EwSkNjRzR6TkVGb2JGbGlhRWRuZGtwd01FcEpNemczYUVkVk5HOUJlVTlOYVRKcU5GTTVRbk5rUVN0eVdVWlFXbTFLVmdwWVpHUkZlbUYxVldWSVpEWnRhV2xVUTFSUmFWcDBXRlpHTkhkRVRGZHNVMGRQVGtGM1UzVnhNRnBIWnpkNVZHNXBlR1JEZGxkV1VVRnFWRlJ5VVc5eENpMHRMUzB0UlU1RUlFTkZVbFJKUmtsRFFWUkZMUzB0TFMwPQogICAgY2xpZW50LWtleS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJTVTBFZ1VGSkpWa0ZVUlNCTFJWa3RMUzB0TFFwTlNVbEZiM2RKUWtGQlMwTkJVVVZCY1hWdU5WWnNObTVDZVhNM09IWnNZaTlXVEZkRVdXbFhjMGw1VTNwcVkwWnJjRXRxUzFsd2FUZGxiVmw2ZEc1aENqbEthblZIVUVOd1RGQnZVV05oSzJGS1lWSldjMGs1YzNOR2NXSkhRVVpIYW1KNlNXUXlSVFJvYkRsek1sZ3ljWFpRWnpSNVVYSjNPR1JpYUVGcmEwTUtVMU5vSzJaaFdGSmlSbk5pWmpSMGNHWnJiV280YVZaUGNXWmpRalJ6ZHpFMmNYSjFURXhhZFZWWmQwZFpiQzkzYjBkeVJteGlPVzg0YlhCNmNYcHBiQW8wWkVwRFdIVTRhWGgxTUd4RFlsQlJaMHRPVFdGa1FuRXhUWFZ2U0hST2RVRmtTV1p2UzFGWWNFY3pXVlpoU0ROWFZHTkpLMnczYXpsWFJubHFNR00yQ25NNGFsazBOVVkxUkhWSFFWazBkVWhIVVhCSlpqbEthVU4yU0hKamVIVXdNMDh4Y1VzeGRVRnJNamMyU1RoUGNqTnVRbFZWUjFkVU1FcDNNblJLTkhVS2NrdGhUMmcyVldOb1pHZHJia2RyZGxCNGRFeG5VVVE0YTFCV0swNDFhbkI0YXpNMFRuZEpSRUZSUVVKQmIwbENRVWhtVURaWFFtOXVaMHBwYUc1WUx3bzFSVXRxWWxSaGVtZzFPV2RFUWtoUVpFaExXbkJTVDJJeFZtOWxjRmRhYzFKb1pYUnNWWFZoWlZvemVqbHpPR0paU2pNcmJ6WjBVQzg0ZEc4eVRYaDBDa3RJTlRNeGNtZEtVMVY1TlZoR04ybDJNbmRXVUdkdFFsTkJUR2QwV0N0aGJYRlhZVmswU0VaWGFHWjRhbXRrVFM5aWFuWXJjVkJ1UkRCM1MzZHBSM2dLVFdsTE9XcEtWaTlzWW5CSmVFeHFNWFJKVG1kR1pqWjRNMlZ2UWtoQ1VrdHFkVGhZTTFaWVZFSlVWMUIwVUZCSVkxcEZOR2czVVVwTmIwVXdkVEY0YlFwWldHMVBabFkwWjBaWFpFZE9UM1pEVlVsMEt5dHBaemd3T1dZelNXRTVNakpCZUNzd1l6YzRhWE5aVEd4RFFVUXdaVTFIY0hFNFZtSjRSWEJyZVRnekNuQmhWeXROZWpab1JTOUlVVTFVT1RkU1l5dHlVekpIYVZodVRXZzNjVk55UXpSMFQzWTRlV3R5TkU5Qk1WTmpPR0p3T0hwdFEzbEtVM2QwY0U5c1FXUUtTa295T0hWelJVTm5XVVZCTTNWS1JteHpNRWh6Y25ocWRuZHBjSHBLTkZrelExUk9lVzloV0dkYWQzTTBPV0ZJTlVWNWQwTlNhbHBRUldnNVVYUTJhUXB3ZFdNMWNFWk9ZM28xVWpjMFVtUnVUM0psU3psd2VuVmphRkpLZW1sYWJYQlRUMWRJVFhGSFdVRnBORlkwU2xKdlNVUjBWMVZHUjJocGJWZ3plRTVxQ21RMFZGRTRWM1JKVG5wM2VuTmhkbGcwY2xKSmRsTnRhWEExT1hOcWIwczJjalpGYm1RclkxcHZZM2hCU2tVdlZqSndURTVMY2tWRFoxbEZRWGhGTjNrS1pUbFVRVXBzVlZwa2QxVmhaa3RIZVhrNVZuSmxWSGdyTm5WNVRsZDRjMGhGVWk5cE5tNXJUa2x6UlZwME5VVjNOMWxTU0RGRlNEQnZZbE5aSzFkQ1N3cFZha1JVTldWMldFOXlaM1ZRUTNCUVlWSndkMlZQTkVsYU5VTnZkRmhMV1dkUmFHTnRjbW93YVRKWWVrNDJVRzVWZGpNdldTdFRVRVZaUTBwSFMxQkJDbHB0S3pKRVkwSmxVR1ZRVFc4NVpGSnBkM0pLZW1RNVNEa3JlVTFhV2tSMFYxVkNZazh5WTBObldVSnVZV2RXZGpKMVNHWm9TbTFxV1ZwdGJsaDRUMW9LTUZadVMzaHVaekZ2ZDJ0U1JHUkZkbXhKVmpWTmVGcFpZV2x1TUdoUGFHcEhTbGxsVFVzck0yZFBWMXB2ZDI4MmNrUTNSaTlxY1VWdkwxVTJkVmxoVndwNVRsRXhkRFpLZUc1S2IzSjNSVTkyWmxOTGFtSjVORkozWlhFNWFtNXNkMVY1WlM5WVJTczVhMU5zVEVoeWFXdGlOVWgzWTNkclRsUlhUa3BJUlRoVENtWnRkVnB5Y0dsMVFXUTRaeXRuYmpONVNGWTFaMUZMUW1kR01tVkpURzAxVkdsR05YUXZhM2R5T1RjM05XZzJZa2QyVUc5VE9HRlNTbE5DY214VlZYWUtXbUpJV1VwT1IwMU5WVEV2Y1d0MU4wbzVOSEo2YUZKSU5HbFJZa3hhV21kMmN6QktWMk13YUVKTWRXZHRaSEJRZURRclJWSlFTRTgxVVZsVVRHNU9jUXB1TWpoVFFWWXhlRTE2YnpOeGFIWkZSV05XTjNaR1ltMWhNM05oY2t0cGRGbGhOMUpNUzBKeVVVczFjVUYyVGtOSk9XUlJVV2wzVkROVGFXRnZkbHBNQ2xsTVlrWkJiMGRDUVVwUU9VZ3pXV1l2UjA4MlZGTkxSVVJ0WjBwT1NsUlFiMHd3ZVVKWWNXdEpRa1ZFY3pSbE5teFNSRVpwWTBGSVNFVlNWMDl5TjA0S1EwUlljekZZTTA1cVRsWXpWMDh4Ymt4NlZVbFhaemsyTWxwS1dqVTNWV0YyVXpkdmEzVllUamxMZFdGNldYbElNRVUwVWsxeE0zVnlVWFZyVjFCcGVncFVhRUpMTXpaNWFYWkVMekZxUXpWbmEyNVNZM3BGZHk5NVFtVnhiV3d4TVVRcllYTXZSVVJyVURKclVFVndhbmxFVldWekNpMHRMUzB0UlU1RUlGSlRRU0JRVWtsV1FWUkZJRXRGV1MwdExTMHQKICBuYW1lOiBhZG1pbgo=
  before_script:
    - echo $VERSION
    - mkdir -p "${KUBECONFIG%/*}" && touch "$KUBECONFIG"
    - echo $kube_config | base64 -d > ${KUBECONFIG}
    - chmod 400 $KUBECONFIG
    # Check cluster state
    - kubectl cluster-info
    - kubectl get pod
    # Install git
    - apk update && apk add git
    - git --version
  script:
    # Download the necessary manifests for deployment
    - mkdir k8s-manifests
    - git clone https://Morozhkaa:glpat-5a8EZCpoXRKssM1h1cwk@gitlab.com/teta-students/hse_shishkina/devops/k8s-manifests.git k8s-manifests
    # Start deployment
    - kubectl apply -f k8s-manifests/frontend/frontend-configmap.yaml
    - kubectl apply -f k8s-manifests/frontend/frontend-gitlab-pull-secret.yml
    # Passing the version of the image to use
    - sed "s/\${IMAGE_VERSION}/$VERSION/g" k8s-manifests/frontend/frontend.yaml > frontend-deployment.yaml
    - kubectl apply -f frontend-deployment.yaml